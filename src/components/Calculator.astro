---
import type { CalculatorConfig } from '../configs/template';
import Slider from './Slider.astro';
import List from './List.astro';
import Checkbox from './Checkbox.astro';
import Radio from './Radio.astro';
import Field from './Field.astro';
import Text from './Text.astro';
import Button from './Button.astro';
import Result from './Result.astro';

interface Props {
  config: CalculatorConfig;
}

const { config } = Astro.props;
---

<div class="max-w-3xl mx-auto bg-white rounded-lg shadow-sm p-8">
  <div class="space-y-6">
    {config.elements.map((element) => {
      switch (element.type) {
        case 'slider':
          return (
            <Slider
              id={element.id}
              label={element.label}
              min={element.min}
              max={element.max}
              step={element.step}
              default={element.default}
              description={element.description}
            />
          );
        case 'list':
          return (
            <List
              id={element.id}
              label={element.label}
              options={element.options}
              value={element.default?.toString() || ''}
            />
          );
        case 'checkbox':
          return (
            <Checkbox
              id={element.id}
              label={element.label}
              checked={!!element.default}
            />
          );
        case 'radio':
          return (
            <Radio
              id={element.id}
              label={element.label}
              options={element.options}
              value={element.default?.toString() || ''}
            />
          );
        case 'field':
          return (
            <Field
              id={element.id}
              label={element.label}
              value={element.default || 0}
            />
          );
        case 'text':
          return (
            <Text text={element.description || element.label} />
          );
        case 'result':
          return (
            <Result
              id={element.id}
              label={element.label}
              value={0}
              isTotal={element.isTotal}
            />
          );
        default:
          return null;
      }
    })}
  </div>

  <div class="mt-8 space-y-2">
    <Result id="paperCost" label="Paper Costs @ 1.4c per page" value={0} />
    <Result id="printingCost" label="Printing/Toner Costs @ 1.2c per page" value={0} />
    <Result id="maintenanceCost" label="Printer/Copier Maintenance @ $395 service fee every 50,000 copies" value={0} />
    <Result id="postageCost" label="Postage Costs @ 50c per mailout" value={0} />
    <Result id="totalCost" label="Total" value={0} isTotal={true} />
  </div>
</div>

<script>
  function calculateResults() {
    const inputs = {};
    const sliders = document.querySelectorAll('input[type="range"]');
    sliders.forEach(slider => {
      inputs[slider.id] = Number(slider.value);
    });

    // Calculate costs for Operoo calculator
    if (document.getElementById('students')) {
      const students = inputs['students'] || 0;
      const pagesStudent = inputs['pagesStudent'] || 0;
      const mailoutsStudent = inputs['mailoutsStudent'] || 0;
      const staff = inputs['staff'] || 0;
      const pagesStaff = inputs['pagesStaff'] || 0;

      const paperCost = (students * pagesStudent) * 0.014;
      const printingCost = (students * pagesStudent + staff * pagesStaff) * 0.012;
      const maintenanceCost = ((students * pagesStudent + staff * pagesStaff) / 50000) * 395;
      const postageCost = (students * mailoutsStudent) * 0.5;
      const totalCost = paperCost + printingCost + maintenanceCost + postageCost;

      updateResult('paperCost', paperCost);
      updateResult('printingCost', printingCost);
      updateResult('maintenanceCost', maintenanceCost);
      updateResult('postageCost', postageCost);
      updateResult('totalCost', totalCost);
    }
  }

  function updateResult(id: string, value: number) {
    const element = document.getElementById(id);
    if (element) {
      element.textContent = `$${value.toFixed(2)}`;
    }
  }

  // Add event listeners to all sliders
  document.querySelectorAll('input[type="range"]').forEach(slider => {
    slider.addEventListener('input', calculateResults);
  });

  // Initial calculation
  calculateResults();
</script> 