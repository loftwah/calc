---
interface Props {
  id: string;
  label: string;
  min: number;
  max: number;
  step: number;
  default: number;
  description?: string;
}

const { id, label, min, max, step, default: defaultValue, description } = Astro.props;
---

<div class="mb-8">
  <div class="flex justify-between items-center mb-2">
    <label for={id} class="text-gray-700 text-sm">
      {label}
    </label>
    <span class="text-sm text-gray-700" id={`${id}-value`}>
      {defaultValue}
    </span>
  </div>
  {description && (
    <p class="text-gray-500 text-sm mb-2">{description}</p>
  )}
  <div class="relative">
    <div class="absolute -top-2 left-0 right-0 flex justify-between text-xs text-gray-400">
      <span>{min}</span>
      <span>{max}</span>
    </div>
    <input
      type="range"
      id={id}
      name={id}
      min={min}
      max={max}
      step={step}
      value={defaultValue}
      class="w-full h-1 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-blue-500"
    />
  </div>
</div>

<script define:vars={{ id }}>
  const slider = document.getElementById(id);
  const output = document.getElementById(`${id}-value`);
  
  slider.addEventListener('input', function() {
    output.textContent = this.value;
    // Dispatch custom event for calculator
    slider.dispatchEvent(new CustomEvent('calculator-update', {
      bubbles: true,
      detail: { id, value: Number(this.value) }
    }));
  });
</script> 